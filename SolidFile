// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SolidFile {
    uint256 public currentCount;

    mapping(uint256 => bool) private seenValues;

    event CounterUpdated(uint256 newCount);

    constructor() {
        currentCount = 0;
    }

    function updateCount(uint256 _newValue) external {
        require(!seenValues[_newValue], "Value must be unique");
        assert(_newValue > currentCount);
        
        seenValues[_newValue] = true;
        currentCount = _newValue;
        
        emit CounterUpdated(_newValue);
    }

    function triggerRevert() pure external {
        revert("Transaction has been intentionally reverted");
    }
}
